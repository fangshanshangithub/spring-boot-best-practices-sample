<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
重点：namespace = *Mapper.java 包名+ 接口名
-->
<mapper namespace="com.xingyun.springbootwithmybatisxmlsample.dao.mapper.UserInfoMapper">

    <!--
    resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象
    resultMap type 结点需要配置实体类的包名和类名全称，
    resultMap id 唯一映射结果集 Id
    <id/> 为主键的映射
    column 数据库查询结果返回的字段名称
    property 实体类字段名称
    一般生产环境，通过resultMap 建立数据库表字段和实体类的映射
    为了区分数据库表字段和实体类字段名称,数据库表字段和实体类字段名称一般设置不一样
    如果没有<typeAlias alias="UserInfo" type="com.xingyun.springbootwithmybatisxmlsample.model.business.UserInfo"/>
    那么就需要这么写<resultMap type="com.xingyun.springbootwithmybatisxmlsample.model.business.UserInfo" id="userInfoMap">
    -->
    <resultMap type="UserInfo" id="userInfoMap">
        <id column="USER_INFO_ID" property="userInfoId"/>
        <result column="USER_INFO_NAME" property="userInfoName"/>
        <result column="USER_INFO_MOBILE" property="userInfoMobile"/>
        <result column="USER_INFO_AGE" property="userInfoAge"/>
        <result column="USER_INFO_SEX" property="userInfoSex"/>
    </resultMap>

    <!--    insert – 映射插入语句-->
    <insert id="insertUserInfo" parameterType="UserInfo" >
        INSERT INTO t_user_info (USER_INFO_NAME,USER_INFO_MOBILE,USER_INFO_AGE,USER_INFO_SEX)VALUES(#{userInfoName},#{userInfoMobile},#{userInfoAge},#{userInfoSex});
    </insert>

    <!--    delete – 映射删除语句-->
    <delete id="deleteUserInfoByUserInfoId" parameterType="long">
        DELETE FROM t_user_info WHERE USER_INFO_ID= #{userInfoId}
    </delete>

    <!--    update – 映射更新语句-->
    <update id="updateUserInfo" parameterType="UserInfo" >
        UPDATE t_user_info SET USER_INFO_NAME= #{userInfoName},USER_INFO_MOBILE= #{userInfoMobile},USER_INFO_AGE= #{userInfoAge},USER_INFO_SEX= #{userInfoSex} WHERE USER_INFO_ID= #{userInfoId}
    </update>

    <!-- sql 可被其他语句引用的可重用语句块-->
    <sql id="userInfoFieldSQLId">
       USER_INFO_ID,USER_INFO_NAME,USER_INFO_MOBILE,USER_INFO_AGE,USER_INFO_SEX
    </sql>

    <!--  select – 映射查询语句
         include 引用一个sql片段
   -->
    <select id="selectUserInfoByUserInfoId"
            parameterType="long"
            resultMap="userInfoMap">
        SELECT <include refid="userInfoFieldSQLId"/>
        FROM t_user_info WHERE USER_INFO_ID = #{userInfoId}
    </select>

    <!--  select – 映射查询语句
          include 引用一个sql片段
    -->
    <select id="selectAllUserInfo"
            resultMap="userInfoMap">
        SELECT
        <include refid="userInfoFieldSQLId"/>
        FROM t_user_info
    </select>

    <!-- 动态SQL
     由于定义了别名
     <typeAlias alias="map" type="java.util.Map"/>
     因此可以这么写 parameterType="map"
     否则就得这么写 parameterType="java.util.Map"
     -->
    <select id="selectAllUserInfoByCondition"
            parameterType="map"
            resultMap="userInfoMap">
        SELECT
        <include refid="userInfoFieldSQLId"/>
        FROM t_user_info
        WHERE
        USER_INFO_NAME = #{userInfoName}
        <if test="null!=userInfoMobile and ''!=userInfoMobile ">
            AND USER_INFO_MOBILE= #{userInfoMobile}
        </if>
        <if test="null!=userInfoAge and 0!=userInfoAge ">
            AND USER_INFO_AGE= #{userInfoAge}
        </if>
        <if test="null!=userInfoSex ">
            AND USER_INFO_SEX= #{userInfoSex}
        </if>
        <if test="null!=userInfoId and 0!=userInfoId ">
            AND USER_INFO_ID= #{userInfoId}
        </if>
    </select>
</mapper>